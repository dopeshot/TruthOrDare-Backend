name: Build/Push Docker, Stop/Start Task

on:
    push:
        branches:
            - 'deploy-aws'

jobs:
    build-and-push:
        name: Build and Push to ECR
        runs-on: ubuntu-latest
        env:
            ECR_REPO: nextparty/wop
            ECS_TASK: nextparty-wop-taskdef
            CLUSTER: nextparty-wop-cluster
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-central-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            - name: Build, Tag, and Push the Image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ env.ECR_REPO }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build --target production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "::set-output name=uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            - name: Download task definition
              env:
                  IMAGE: ${{ steps.build-image.outputs.uri }}
              run: |
                  aws ecs describe-task-definition --task-definition $ECS_TASK --query taskDefinition | jq -r --arg IMAGE $IMAGE '.containerDefinitions[0].image = $IMAGE | del(
                    .taskDefinitionArn,
                    .requiresAttributes,
                    .compatibilities,
                    .revision,
                    .status,
                    .registeredAt,
                    .registeredBy
                  )' > task-definition.json
            - name: Get running Task
              id: get-task
              run: |
                  echo "::set-output name=task::$(aws ecs list-tasks --cluster $CLUSTER --query taskArns[0])"
                  echo ${{ steps.build-image.outputs.uri }}
            - name: Stop running Task
              run: |
                  aws ecs stop-task --task ${{ steps.get-task.outputs.task }} --cluster $CLUSTER
            - name: Run Task on Amazon ECS
              uses: smitp/amazon-ecs-run-task@v1
              with:
                  task-definition: task-definition.json
                  cluster: ${{ env.CLUSTER }}
                  count: 1
                  started-by: github-actions-${{ github.actor }}
                  wait-for-finish: false
            - name: Log out of Amazon ECR
              if: always()
              run: docker logout ${{ steps.login-ecr.outputs.registry}}
